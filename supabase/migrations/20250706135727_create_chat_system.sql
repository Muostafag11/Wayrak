-- This script creates the chat functionality tables and RLS policies.

-- 1. Create a table for conversations
CREATE TABLE public.conversations (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    shipment_id UUID REFERENCES public.shipments(id) ON DELETE CASCADE NOT NULL UNIQUE, -- Each shipment has one conversation
    merchant_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    driver_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL
);

-- 2. Create a table for messages
CREATE TABLE public.messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    conversation_id UUID REFERENCES public.conversations(id) ON DELETE CASCADE NOT NULL,
    sender_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    content TEXT NOT NULL
);

-- 3. Enable RLS for both tables
ALTER TABLE public.conversations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;

-- 4. Create policies for conversations
CREATE POLICY "Users can view conversations they are part of."
ON public.conversations FOR SELECT
USING (auth.uid() = merchant_id OR auth.uid() = driver_id);

-- 5. Create policies for messages
CREATE POLICY "Users can view messages in conversations they are part of."
ON public.messages FOR SELECT
USING (
  (select conversation_id from public.messages where id = messages.id) 
  in (
    select id from public.conversations 
    where auth.uid() = merchant_id or auth.uid() = driver_id
  )
);

CREATE POLICY "Users can insert messages in conversations they are part of."
ON public.messages FOR INSERT
WITH CHECK (
  auth.uid() = sender_id AND
  (select conversation_id from public.messages where id = messages.id) 
  in (
    select id from public.conversations 
    where auth.uid() = merchant_id or auth.uid() = driver_id
  )
);

-- 6. Set up realtime publications
-- Supabase needs to be told which tables to broadcast changes for.
BEGIN;
  -- remove the realtime publication
  DROP PUBLICATION IF EXISTS supabase_realtime;

  -- re-create the publication but don't add any tables
  CREATE PUBLICATION supabase_realtime;
COMMIT;

-- Add the messages table to the publication
ALTER PUBLICATION supabase_realtime ADD TABLE public.messages;